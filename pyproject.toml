[project]
name = "lipservice"
version = "0.8.0"
description = "AI-powered intelligent log sampling that reduces costs by 50-80%"
requires-python = "==3.11.*"  # Match PostHog exactly
readme = "README.md"
license = { text = "MIT" }

dependencies = [
    # Core API framework
    "fastapi>=0.118.0",
    "uvicorn>=0.37.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.27.0",
    
    # Database & Storage (matching PostHog versions)
    "sqlalchemy==2.0.38",  # PostHog uses 2.0.38
    "psycopg2-binary==2.9.7",  # PostHog uses 2.9.7
    "redis==4.5.4",  # PostHog uses 4.5.4 (not 6.x!)
    "clickhouse-driver==0.2.9",  # PostHog uses 0.2.9
    
    # Pydantic & Logging (matching PostHog)
    "pydantic==2.10.3",  # PostHog uses 2.10.3
    "structlog==25.4.0",  # PostHog uses 25.4.0
    
    # LLM Providers (matching PostHog)
    "openai==1.102.0",  # PostHog uses 1.102.0
    "anthropic==0.52.0",  # PostHog uses 0.52.0
    
    # ML/Analysis (matching PostHog)
    "scikit-learn==1.5.0",  # PostHog uses 1.5.0
    "numpy==1.26.4",  # PostHog uses 1.26.4
    
    # Real-Time Streaming & Visualization
    "websockets>=12.0",  # For WebSocket support
    "plotly>=5.17.0",    # For advanced visualizations (optional)
    "dash>=2.14.0",      # For interactive dashboards (optional)
    
    # OpenTelemetry (matching PostHog versions - for OTLP exporters)
    "opentelemetry-sdk==1.33.1",  # PostHog uses 1.33.1
    "opentelemetry-exporter-otlp-proto-grpc==1.33.1",  # PostHog uses 1.33.1
    
    # Additional (not in PostHog, but needed for us)
    "alembic>=1.13.0",  # Database migrations
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.14.0",
    "mypy>=1.8.0",
    "types-redis>=4.6.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# ============================================================================
# Ruff Configuration (matching PostHog's standards)
# ============================================================================
[tool.ruff]
line-length = 120  # PostHog uses 120, not the default 79
target-version = "py311"
exclude = [
    ".git",
    ".venv",
    "venv",
    "env",
    "__pycache__",
    "*.egg-info",
    "build",
    "dist",
]

[tool.ruff.lint]
# PostHog's exact selection of rules (from their pyproject.toml)
select = [
    "B",       # flake8-bugbear
    "C4",      # flake8-comprehensions
    "C9",      # mccabe complexity
    "E",       # pycodestyle errors
    "F",       # pyflakes
    "I",       # isort
    "RUF005",  # collection-literal-concatenation
    "RUF013",  # implicit-optional
    "RUF015",  # unnecessary-iterable-allocation-for-first-element
    "RUF019",  # unnecessary-key-check
    "T100",    # debugger
    "T2",      # print-found
    "TRY201",  # verbose-raise
    "TRY400",  # error-instead-of-exception
    "UP",      # pyupgrade
    "W",       # pycodestyle warnings
]

# PostHog's ignore list (for compatibility)
ignore = [
    "B017",  # assertRaises(Exception)
    "B019",  # Use of functools.lru_cache
    "B904",  # Use raise from
    "B905",  # zip() without explicit strict
    "C901",  # Complex function
    "E501",  # Line too long (formatter handles)
    "E722",  # Bare except
    "E731",  # Lambda assignment
    "F403",  # Star imports
    "F541",  # f-string without placeholders
    "F601",  # Dictionary key repeated
    "UP007", # Use X | Y for Union
    "UP032", # Use f-string
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
# PostHog's isort configuration
combine-as-imports = true
force-wrap-aliases = true
length-sort-straight = true
split-on-trailing-comma = false
known-first-party = ["src", "lipservice"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# MyPy Configuration (matching PostHog's strict standards)
# ============================================================================
[tool.mypy]
python_version = "3.11"
strict_optional = true
no_implicit_optional = true
warn_unused_ignores = true
check_untyped_defs = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
exclude = [
    "^build/",
    "^dist/",
    "^\\.venv/",
]

# ============================================================================
# Pytest Configuration (matching PostHog's setup)
# ============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
]
asyncio_mode = "auto"

# ============================================================================
# Coverage Configuration
# ============================================================================
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "**/__pycache__/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

